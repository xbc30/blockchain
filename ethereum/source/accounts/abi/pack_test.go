
//此源码被清华学神尹成大魔王专业翻译分析并修改
//尹成QQ77025077
//尹成微信18510341407
//尹成所在QQ群721929980
//尹成邮箱 yinc13@mails.tsinghua.edu.cn
//尹成毕业于清华大学,微软区块链领域全球最有价值专家
//https://mvp.microsoft.com/zh-cn/PublicProfile/4033620
//版权所有2017 Go Ethereum作者
//此文件是Go以太坊库的一部分。
//
//Go-Ethereum库是免费软件：您可以重新分发它和/或修改
//根据GNU发布的较低通用公共许可证的条款
//自由软件基金会，或者许可证的第3版，或者
//（由您选择）任何更高版本。
//
//Go以太坊图书馆的发行目的是希望它会有用，
//但没有任何保证；甚至没有
//适销性或特定用途的适用性。见
//GNU较低的通用公共许可证，了解更多详细信息。
//
//你应该收到一份GNU较低级别的公共许可证副本
//以及Go以太坊图书馆。如果没有，请参见<http://www.gnu.org/licenses/>。

package abi

import (
	"bytes"
	"math"
	"math/big"
	"reflect"
	"strings"
	"testing"

	"github.com/ethereum/go-ethereum/common"
)

func TestPack(t *testing.T) {
	for i, test := range []struct {
		typ        string
		components []ArgumentMarshaling
		input      interface{}
		output     []byte
	}{
		{
			"uint8",
			nil,
			uint8(2),
			common.Hex2Bytes("0000000000000000000000000000000000000000000000000000000000000002"),
		},
		{
			"uint8[]",
			nil,
			[]uint8{1, 2},
			common.Hex2Bytes("000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002"),
		},
		{
			"uint16",
			nil,
			uint16(2),
			common.Hex2Bytes("0000000000000000000000000000000000000000000000000000000000000002"),
		},
		{
			"uint16[]",
			nil,
			[]uint16{1, 2},
			common.Hex2Bytes("000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002"),
		},
		{
			"uint32",
			nil,
			uint32(2),
			common.Hex2Bytes("0000000000000000000000000000000000000000000000000000000000000002"),
		},
		{
			"uint32[]",
			nil,
			[]uint32{1, 2},
			common.Hex2Bytes("000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002"),
		},
		{
			"uint64",
			nil,
			uint64(2),
			common.Hex2Bytes("0000000000000000000000000000000000000000000000000000000000000002"),
		},
		{
			"uint64[]",
			nil,
			[]uint64{1, 2},
			common.Hex2Bytes("000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002"),
		},
		{
			"uint256",
			nil,
			big.NewInt(2),
			common.Hex2Bytes("0000000000000000000000000000000000000000000000000000000000000002"),
		},
		{
			"uint256[]",
			nil,
			[]*big.Int{big.NewInt(1), big.NewInt(2)},
			common.Hex2Bytes("000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002"),
		},
		{
			"int8",
			nil,
			int8(2),
			common.Hex2Bytes("0000000000000000000000000000000000000000000000000000000000000002"),
		},
		{
			"int8[]",
			nil,
			[]int8{1, 2},
			common.Hex2Bytes("000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002"),
		},
		{
			"int16",
			nil,
			int16(2),
			common.Hex2Bytes("0000000000000000000000000000000000000000000000000000000000000002"),
		},
		{
			"int16[]",
			nil,
			[]int16{1, 2},
			common.Hex2Bytes("000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002"),
		},
		{
			"int32",
			nil,
			int32(2),
			common.Hex2Bytes("0000000000000000000000000000000000000000000000000000000000000002"),
		},
		{
			"int32[]",
			nil,
			[]int32{1, 2},
			common.Hex2Bytes("000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002"),
		},
		{
			"int64",
			nil,
			int64(2),
			common.Hex2Bytes("0000000000000000000000000000000000000000000000000000000000000002"),
		},
		{
			"int64[]",
			nil,
			[]int64{1, 2},
			common.Hex2Bytes("000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002"),
		},
		{
			"int256",
			nil,
			big.NewInt(2),
			common.Hex2Bytes("0000000000000000000000000000000000000000000000000000000000000002"),
		},
		{
			"int256[]",
			nil,
			[]*big.Int{big.NewInt(1), big.NewInt(2)},
			common.Hex2Bytes("000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002"),
		},
		{
			"bytes1",
			nil,
			[1]byte{1},
			common.Hex2Bytes("0100000000000000000000000000000000000000000000000000000000000000"),
		},
		{
			"bytes2",
			nil,
			[2]byte{1},
			common.Hex2Bytes("0100000000000000000000000000000000000000000000000000000000000000"),
		},
		{
			"bytes3",
			nil,
			[3]byte{1},
			common.Hex2Bytes("0100000000000000000000000000000000000000000000000000000000000000"),
		},
		{
			"bytes4",
			nil,
			[4]byte{1},
			common.Hex2Bytes("0100000000000000000000000000000000000000000000000000000000000000"),
		},
		{
			"bytes5",
			nil,
			[5]byte{1},
			common.Hex2Bytes("0100000000000000000000000000000000000000000000000000000000000000"),
		},
		{
			"bytes6",
			nil,
			[6]byte{1},
			common.Hex2Bytes("0100000000000000000000000000000000000000000000000000000000000000"),
		},
		{
			"bytes7",
			nil,
			[7]byte{1},
			common.Hex2Bytes("0100000000000000000000000000000000000000000000000000000000000000"),
		},
		{
			"bytes8",
			nil,
			[8]byte{1},
			common.Hex2Bytes("0100000000000000000000000000000000000000000000000000000000000000"),
		},
		{
			"bytes9",
			nil,
			[9]byte{1},
			common.Hex2Bytes("0100000000000000000000000000000000000000000000000000000000000000"),
		},
		{
			"bytes10",
			nil,
			[10]byte{1},
			common.Hex2Bytes("0100000000000000000000000000000000000000000000000000000000000000"),
		},
		{
			"bytes11",
			nil,
			[11]byte{1},
			common.Hex2Bytes("0100000000000000000000000000000000000000000000000000000000000000"),
		},
		{
			"bytes12",
			nil,
			[12]byte{1},
			common.Hex2Bytes("0100000000000000000000000000000000000000000000000000000000000000"),
		},
		{
			"bytes13",
			nil,
			[13]byte{1},
			common.Hex2Bytes("0100000000000000000000000000000000000000000000000000000000000000"),
		},
		{
			"bytes14",
			nil,
			[14]byte{1},
			common.Hex2Bytes("0100000000000000000000000000000000000000000000000000000000000000"),
		},
		{
			"bytes15",
			nil,
			[15]byte{1},
			common.Hex2Bytes("0100000000000000000000000000000000000000000000000000000000000000"),
		},
		{
			"bytes16",
			nil,
			[16]byte{1},
			common.Hex2Bytes("0100000000000000000000000000000000000000000000000000000000000000"),
		},
		{
			"bytes17",
			nil,
			[17]byte{1},
			common.Hex2Bytes("0100000000000000000000000000000000000000000000000000000000000000"),
		},
		{
			"bytes18",
			nil,
			[18]byte{1},
			common.Hex2Bytes("0100000000000000000000000000000000000000000000000000000000000000"),
		},
		{
			"bytes19",
			nil,
			[19]byte{1},
			common.Hex2Bytes("0100000000000000000000000000000000000000000000000000000000000000"),
		},
		{
			"bytes20",
			nil,
			[20]byte{1},
			common.Hex2Bytes("0100000000000000000000000000000000000000000000000000000000000000"),
		},
		{
			"bytes21",
			nil,
			[21]byte{1},
			common.Hex2Bytes("0100000000000000000000000000000000000000000000000000000000000000"),
		},
		{
			"bytes22",
			nil,
			[22]byte{1},
			common.Hex2Bytes("0100000000000000000000000000000000000000000000000000000000000000"),
		},
		{
			"bytes23",
			nil,
			[23]byte{1},
			common.Hex2Bytes("0100000000000000000000000000000000000000000000000000000000000000"),
		},
		{
			"bytes24",
			nil,
			[24]byte{1},
			common.Hex2Bytes("0100000000000000000000000000000000000000000000000000000000000000"),
		},
		{
			"bytes25",
			nil,
			[25]byte{1},
			common.Hex2Bytes("0100000000000000000000000000000000000000000000000000000000000000"),
		},
		{
			"bytes26",
			nil,
			[26]byte{1},
			common.Hex2Bytes("0100000000000000000000000000000000000000000000000000000000000000"),
		},
		{
			"bytes27",
			nil,
			[27]byte{1},
			common.Hex2Bytes("0100000000000000000000000000000000000000000000000000000000000000"),
		},
		{
			"bytes28",
			nil,
			[28]byte{1},
			common.Hex2Bytes("0100000000000000000000000000000000000000000000000000000000000000"),
		},
		{
			"bytes29",
			nil,
			[29]byte{1},
			common.Hex2Bytes("0100000000000000000000000000000000000000000000000000000000000000"),
		},
		{
			"bytes30",
			nil,
			[30]byte{1},
			common.Hex2Bytes("0100000000000000000000000000000000000000000000000000000000000000"),
		},
		{
			"bytes31",
			nil,
			[31]byte{1},
			common.Hex2Bytes("0100000000000000000000000000000000000000000000000000000000000000"),
		},
		{
			"bytes32",
			nil,
			[32]byte{1},
			common.Hex2Bytes("0100000000000000000000000000000000000000000000000000000000000000"),
		},
		{
			"uint32[2][3][4]",
			nil,
			[4][3][2]uint32{{{1, 2}, {3, 4}, {5, 6}}, {{7, 8}, {9, 10}, {11, 12}}, {{13, 14}, {15, 16}, {17, 18}}, {{19, 20}, {21, 22}, {23, 24}}},
			common.Hex2Bytesa000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000f000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001300000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000015000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000170000000000000000000000000000000000000000000000000000000000000018"),
		},
		{
			"address[]",
			nil,
			[]common.Address{{1}, {2}},
			common.Hex2Bytes("000000000000000000000000000000000000000000000000000000000000000200000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000"),
		},
		{
			"bytes32[]",
			nil,
			[]common.Hash{{1}, {2}},
			common.Hex2Bytes("000000000000000000000000000000000000000000000000000000000000000201000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000"),
		},
		{
			"function",
			nil,
			[24]byte{1},
			common.Hex2Bytes("0100000000000000000000000000000000000000000000000000000000000000"),
		},
		{
			"string",
			nil,
			"foobar",
			common.Hex2Bytes("0000000000000000000000000000000000000000000000000000000000000006666f6f6261720000000000000000000000000000000000000000000000000000"),
		},
		{
			"string[]",
			nil,
			[]string{"hello", "foobar"},
common.Hex2Bytes("0000000000000000000000000000000000000000000000000000000000000002" + //LeN（数组）＝2
"0000000000000000000000000000000000000000000000000000000000000040" + //偏移64到i=0
"0000000000000000000000000000000000000000000000000000000000000080" + //偏移128至i=1
"0000000000000000000000000000000000000000000000000000000000000005" + //LeN（STR〔0〕）＝5
"68656c6c6f000000000000000000000000000000000000000000000000000000" + //STR〔0〕
"0000000000000000000000000000000000000000000000000000000000000006" + //LeN（STR〔1〕）＝6
"666f6f6261720000000000000000000000000000000000000000000000000000"), //STR〔1〕
		},
		{
			"string[2]",
			nil,
			[]string{"hello", "foobar"},
common.Hex2Bytes("0000000000000000000000000000000000000000000000000000000000000040" + //偏移到i＝0
"0000000000000000000000000000000000000000000000000000000000000080" + //偏移到i＝1
"0000000000000000000000000000000000000000000000000000000000000005" + //LeN（STR〔0〕）＝5
"68656c6c6f000000000000000000000000000000000000000000000000000000" + //STR〔0〕
"0000000000000000000000000000000000000000000000000000000000000006" + //LeN（STR〔1〕）＝6
"666f6f6261720000000000000000000000000000000000000000000000000000"), //STR〔1〕
		},
		{
			"bytes32[][]",
			nil,
			[][]common.Hash{{{1}, {2}}, {{3}, {4}, {5}}},
common.Hex2Bytes("0000000000000000000000000000000000000000000000000000000000000002" + //LeN（数组）＝2
"0000000000000000000000000000000000000000000000000000000000000040" + //偏移64到i=0
"00000000000000000000000000000000000000000000000000000000000000a0" + //偏移160至i=1
"0000000000000000000000000000000000000000000000000000000000000002" + //len（数组[0]）=2
"0100000000000000000000000000000000000000000000000000000000000000" + //数组〔0〕〔0〕
"0200000000000000000000000000000000000000000000000000000000000000" + //数组〔0〕〔1〕
"0000000000000000000000000000000000000000000000000000000000000003" + //len（数组[1]）=3
"0300000000000000000000000000000000000000000000000000000000000000" + //数组〔1〕〔0〕
"0400000000000000000000000000000000000000000000000000000000000000" + //
"0500000000000000000000000000000000000000000000000000000000000000"), //
		},

		{
			"bytes32[][2]",
			nil,
			[][]common.Hash{{{1}, {2}}, {{3}, {4}, {5}}},
common.Hex2Bytes("0000000000000000000000000000000000000000000000000000000000000040" + //偏移64到i=0
"00000000000000000000000000000000000000000000000000000000000000a0" + //偏移160至i=1
"0000000000000000000000000000000000000000000000000000000000000002" + //len（数组[0]）=2
"0100000000000000000000000000000000000000000000000000000000000000" + //数组〔0〕〔0〕
"0200000000000000000000000000000000000000000000000000000000000000" + //数组〔0〕〔1〕
"0000000000000000000000000000000000000000000000000000000000000003" + //len（数组[1]）=3
"0300000000000000000000000000000000000000000000000000000000000000" + //数组〔1〕〔0〕
"0400000000000000000000000000000000000000000000000000000000000000" + //数组〔1〕〔1〕
"0500000000000000000000000000000000000000000000000000000000000000"), //数组〔1〕〔2〕
		},

		{
			"bytes32[3][2]",
			nil,
			[][]common.Hash{{{1}, {2}, {3}}, {{3}, {4}, {5}}},
common.Hex2Bytes("0100000000000000000000000000000000000000000000000000000000000000" + //数组〔0〕〔0〕
"0200000000000000000000000000000000000000000000000000000000000000" + //数组〔0〕〔1〕
"0300000000000000000000000000000000000000000000000000000000000000" + //数组〔0〕〔2〕
"0300000000000000000000000000000000000000000000000000000000000000" + //数组〔1〕〔0〕
"0400000000000000000000000000000000000000000000000000000000000000" + //数组〔1〕〔1〕
"0500000000000000000000000000000000000000000000000000000000000000"), //数组〔1〕〔2〕
		},
		{
//静态元组
			"tuple",
			[]ArgumentMarshaling{
				{Name: "a", Type: "int64"},
				{Name: "b", Type: "int256"},
				{Name: "c", Type: "int256"},
				{Name: "d", Type: "bool"},
				{Name: "e", Type: "bytes32[3][2]"},
			},
			struct {
				A int64
				B *big.Int
				C *big.Int
				D bool
				E [][]common.Hash
			}{1, big.NewInt(1), big.NewInt(-1), true, [][]common.Hash{{{1}, {2}, {3}}, {{3}, {4}, {5}}}},
common.Hex2Bytes("0000000000000000000000000000000000000000000000000000000000000001" + //结构[ a]
"0000000000000000000000000000000000000000000000000000000000000001" + //结构[B]
"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff" + //结构[C]
"0000000000000000000000000000000000000000000000000000000000000001" + //结构[ D ]
"0100000000000000000000000000000000000000000000000000000000000000" + //结构[E]数组[0][0]
"0200000000000000000000000000000000000000000000000000000000000000" + //结构[E]数组[0][1]
"0300000000000000000000000000000000000000000000000000000000000000" + //结构[E]数组[0][2]
"0300000000000000000000000000000000000000000000000000000000000000" + //结构[E]数组[1][0]
"0400000000000000000000000000000000000000000000000000000000000000" + //结构[E]数组[1][1]
"0500000000000000000000000000000000000000000000000000000000000000"), //结构[E]数组[1][2]
		},
		{
//动态元组
			"tuple",
			[]ArgumentMarshaling{
				{Name: "a", Type: "string"},
				{Name: "b", Type: "int64"},
				{Name: "c", Type: "bytes"},
				{Name: "d", Type: "string[]"},
				{Name: "e", Type: "int256[]"},
				{Name: "f", Type: "address[]"},
			},
			struct {
FieldA string `abi:"a"` //测试ABI标签是否有效
				FieldB int64  `abi:"b"`
				C      []byte
				D      []string
				E      []*big.Int
				F      []common.Address
			}{"foobar", 1, []byte{1}, []string{"foo", "bar"}, []*big.Int{big.NewInt(1), big.NewInt(-1)}, []common.Address{{1}, {2}}},
common.Hex2Bytes("00000000000000000000000000000000000000000000000000000000000000c0" + //结构[A]偏移
"0000000000000000000000000000000000000000000000000000000000000001" + //结构[B]
"0000000000000000000000000000000000000000000000000000000000000100" + //结构[C]偏移量
"0000000000000000000000000000000000000000000000000000000000000140" + //结构[d]偏移量
"0000000000000000000000000000000000000000000000000000000000000220" + //结构[e]偏移量
"0000000000000000000000000000000000000000000000000000000000000280" + //结构[F]偏移量
"0000000000000000000000000000000000000000000000000000000000000006" + //结构长度
"666f6f6261720000000000000000000000000000000000000000000000000000" + //结构[A]“foobar”
"0000000000000000000000000000000000000000000000000000000000000001" + //结构长度
"0100000000000000000000000000000000000000000000000000000000000000" + //[]字节{ 1 }
"0000000000000000000000000000000000000000000000000000000000000002" + //结构[d]长度
"0000000000000000000000000000000000000000000000000000000000000040" + //浮点偏移
"0000000000000000000000000000000000000000000000000000000000000080" + //杆偏置
"0000000000000000000000000000000000000000000000000000000000000003" + //英尺长度
"666f6f0000000000000000000000000000000000000000000000000000000000" + //福
"0000000000000000000000000000000000000000000000000000000000000003" + //杆偏置
"6261720000000000000000000000000000000000000000000000000000000000" + //酒吧
"0000000000000000000000000000000000000000000000000000000000000002" + //结构长度
"0000000000000000000000000000000000000000000000000000000000000001" + //一
"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff" + //- 1
"0000000000000000000000000000000000000000000000000000000000000002" + //结构长度
"0000000000000000000000000100000000000000000000000000000000000000" + //普通地址1
"0000000000000000000000000200000000000000000000000000000000000000"), //普通地址2
		},
		{
//嵌套元组
			"tuple",
			[]ArgumentMarshaling{
				{Name: "a", Type: "tuple", Components: []ArgumentMarshaling{{Name: "a", Type: "uint256"}, {Name: "b", Type: "uint256[]"}}},
				{Name: "b", Type: "int256[]"},
			},
			struct {
				A struct {
					FieldA *big.Int `abi:"a"`
					B      []*big.Int
				}
				B []*big.Int
			}{
				A: struct {
FieldA *big.Int `abi:"a"` //测试ABI标记是否适用于嵌套元组
					B      []*big.Int
				}{big.NewInt(1), []*big.Int{big.NewInt(1), big.NewInt(0)}},
				B: []*big.Int{big.NewInt(1), big.NewInt(0)}},
common.Hex2Bytes("0000000000000000000000000000000000000000000000000000000000000040" + //偏移量
"00000000000000000000000000000000000000000000000000000000000000e0" + //B偏移量
"0000000000000000000000000000000000000000000000000000000000000001" + //A.值
"0000000000000000000000000000000000000000000000000000000000000040" + //A.B偏移量
"0000000000000000000000000000000000000000000000000000000000000002" + //A.B长度
"0000000000000000000000000000000000000000000000000000000000000001" + //A.B.〔0〕值
"0000000000000000000000000000000000000000000000000000000000000000" + //A.B.〔1〕值
"0000000000000000000000000000000000000000000000000000000000000002" + //B长
"0000000000000000000000000000000000000000000000000000000000000001" + //B〔0〕值
"0000000000000000000000000000000000000000000000000000000000000000"), //B〔1〕值
		},
		{
//元组切片
			"tuple[]",
			[]ArgumentMarshaling{
				{Name: "a", Type: "int256"},
				{Name: "b", Type: "int256[]"},
			},
			[]struct {
				A *big.Int
				B []*big.Int
			}{
				{big.NewInt(-1), []*big.Int{big.NewInt(1), big.NewInt(0)}},
				{big.NewInt(1), []*big.Int{big.NewInt(2), big.NewInt(-1)}},
			},
common.Hex2Bytes("0000000000000000000000000000000000000000000000000000000000000002" + //元组长度
"0000000000000000000000000000000000000000000000000000000000000040" + //元组〔0〕偏移
"00000000000000000000000000000000000000000000000000000000000000e0" + //元组〔1〕偏移
"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff" + //元组〔0〕
"0000000000000000000000000000000000000000000000000000000000000040" + //元组[0].b偏移量
"0000000000000000000000000000000000000000000000000000000000000002" + //元组[0].b长度
"0000000000000000000000000000000000000000000000000000000000000001" + //元组[0].b[0]值
"0000000000000000000000000000000000000000000000000000000000000000" + //元组[0].b[1]值
"0000000000000000000000000000000000000000000000000000000000000001" + //元组〔1〕
"0000000000000000000000000000000000000000000000000000000000000040" + //元组[1].b偏移量
"0000000000000000000000000000000000000000000000000000000000000002" + //元组[1].b长度
"0000000000000000000000000000000000000000000000000000000000000002" + //元组[1].b[0]值
"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"), //元组[1].b[1]值
		},
		{
//静态元组数组
			"tuple[2]",
			[]ArgumentMarshaling{
				{Name: "a", Type: "int256"},
				{Name: "b", Type: "int256"},
			},
			[2]struct {
				A *big.Int
				B *big.Int
			}{
				{big.NewInt(-1), big.NewInt(1)},
				{big.NewInt(1), big.NewInt(-1)},
			},
common.Hex2Bytes("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff" + //元组〔0〕
"0000000000000000000000000000000000000000000000000000000000000001" + //元组〔0〕
"0000000000000000000000000000000000000000000000000000000000000001" + //元组〔1〕
"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"), //元组〔1〕
		},
		{
//动态元组数组
			"tuple[2]",
			[]ArgumentMarshaling{
				{Name: "a", Type: "int256[]"},
			},
			[2]struct {
				A []*big.Int
			}{
				{[]*big.Int{big.NewInt(-1), big.NewInt(1)}},
				{[]*big.Int{big.NewInt(1), big.NewInt(-1)}},
			},
common.Hex2Bytes("0000000000000000000000000000000000000000000000000000000000000040" + //元组〔0〕偏移
"00000000000000000000000000000000000000000000000000000000000000c0" + //元组〔1〕偏移
"0000000000000000000000000000000000000000000000000000000000000020" + //元组[0]。偏移量
"0000000000000000000000000000000000000000000000000000000000000002" + //元组[0]。长度
"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff" + //元组〔0〕A〔0〕
"0000000000000000000000000000000000000000000000000000000000000001" + //元组〔0〕A〔1〕
"0000000000000000000000000000000000000000000000000000000000000020" + //元组[1]。偏移量
"0000000000000000000000000000000000000000000000000000000000000002" + //元组[1]。长度
"0000000000000000000000000000000000000000000000000000000000000001" + //元组〔1〕A〔0〕
"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"), //元组〔1〕A〔1〕
		},
	} {
		typ, err := NewType(test.typ, test.components)
		if err != nil {
			t.Fatalf("%v failed. Unexpected parse error: %v", i, err)
		}
		output, err := typ.pack(reflect.ValueOf(test.input))
		if err != nil {
			t.Fatalf("%v failed. Unexpected pack error: %v", i, err)
		}

		if !bytes.Equal(output, test.output) {
			t.Errorf("input %d for typ: %v failed. Expected bytes: '%x' Got: '%x'", i, typ.String(), test.output, output)
		}
	}
}

func TestMethodPack(t *testing.T) {
	abi, err := JSON(strings.NewReader(jsondata2))
	if err != nil {
		t.Fatal(err)
	}

	sig := abi.Methods["slice"].Id()
	sig = append(sig, common.LeftPadBytes([]byte{1}, 32)...)
	sig = append(sig, common.LeftPadBytes([]byte{2}, 32)...)

	packed, err := abi.Pack("slice", []uint32{1, 2})
	if err != nil {
		t.Error(err)
	}

	if !bytes.Equal(packed, sig) {
		t.Errorf("expected %x got %x", sig, packed)
	}

	var addrA, addrB = common.Address{1}, common.Address{2}
	sig = abi.Methods["sliceAddress"].Id()
	sig = append(sig, common.LeftPadBytes([]byte{32}, 32)...)
	sig = append(sig, common.LeftPadBytes([]byte{2}, 32)...)
	sig = append(sig, common.LeftPadBytes(addrA[:], 32)...)
	sig = append(sig, common.LeftPadBytes(addrB[:], 32)...)

	packed, err = abi.Pack("sliceAddress", []common.Address{addrA, addrB})
	if err != nil {
		t.Fatal(err)
	}
	if !bytes.Equal(packed, sig) {
		t.Errorf("expected %x got %x", sig, packed)
	}

	var addrC, addrD = common.Address{3}, common.Address{4}
	sig = abi.Methods["sliceMultiAddress"].Id()
	sig = append(sig, common.LeftPadBytes([]byte{64}, 32)...)
	sig = append(sig, common.LeftPadBytes([]byte{160}, 32)...)
	sig = append(sig, common.LeftPadBytes([]byte{2}, 32)...)
	sig = append(sig, common.LeftPadBytes(addrA[:], 32)...)
	sig = append(sig, common.LeftPadBytes(addrB[:], 32)...)
	sig = append(sig, common.LeftPadBytes([]byte{2}, 32)...)
	sig = append(sig, common.LeftPadBytes(addrC[:], 32)...)
	sig = append(sig, common.LeftPadBytes(addrD[:], 32)...)

	packed, err = abi.Pack("sliceMultiAddress", []common.Address{addrA, addrB}, []common.Address{addrC, addrD})
	if err != nil {
		t.Fatal(err)
	}
	if !bytes.Equal(packed, sig) {
		t.Errorf("expected %x got %x", sig, packed)
	}

	sig = abi.Methods["slice256"].Id()
	sig = append(sig, common.LeftPadBytes([]byte{1}, 32)...)
	sig = append(sig, common.LeftPadBytes([]byte{2}, 32)...)

	packed, err = abi.Pack("slice256", []*big.Int{big.NewInt(1), big.NewInt(2)})
	if err != nil {
		t.Error(err)
	}

	if !bytes.Equal(packed, sig) {
		t.Errorf("expected %x got %x", sig, packed)
	}

	a := [2][2]*big.Int{{big.NewInt(1), big.NewInt(1)}, {big.NewInt(2), big.NewInt(0)}}
	sig = abi.Methods["nestedArray"].Id()
	sig = append(sig, common.LeftPadBytes([]byte{1}, 32)...)
	sig = append(sig, common.LeftPadBytes([]byte{1}, 32)...)
	sig = append(sig, common.LeftPadBytes([]byte{2}, 32)...)
	sig = append(sig, common.LeftPadBytes([]byte{0}, 32)...)
	sig = append(sig, common.LeftPadBytes([]byte{0xa0}, 32)...)
	sig = append(sig, common.LeftPadBytes([]byte{2}, 32)...)
	sig = append(sig, common.LeftPadBytes(addrC[:], 32)...)
	sig = append(sig, common.LeftPadBytes(addrD[:], 32)...)
	packed, err = abi.Pack("nestedArray", a, []common.Address{addrC, addrD})
	if err != nil {
		t.Fatal(err)
	}
	if !bytes.Equal(packed, sig) {
		t.Errorf("expected %x got %x", sig, packed)
	}

	sig = abi.Methods["nestedArray2"].Id()
	sig = append(sig, common.LeftPadBytes([]byte{0x20}, 32)...)
	sig = append(sig, common.LeftPadBytes([]byte{0x40}, 32)...)
	sig = append(sig, common.LeftPadBytes([]byte{0x80}, 32)...)
	sig = append(sig, common.LeftPadBytes([]byte{1}, 32)...)
	sig = append(sig, common.LeftPadBytes([]byte{1}, 32)...)
	sig = append(sig, common.LeftPadBytes([]byte{1}, 32)...)
	sig = append(sig, common.LeftPadBytes([]byte{1}, 32)...)
	packed, err = abi.Pack("nestedArray2", [2][]uint8{{1}, {1}})
	if err != nil {
		t.Fatal(err)
	}
	if !bytes.Equal(packed, sig) {
		t.Errorf("expected %x got %x", sig, packed)
	}

	sig = abi.Methods["nestedSlice"].Id()
	sig = append(sig, common.LeftPadBytes([]byte{0x20}, 32)...)
	sig = append(sig, common.LeftPadBytes([]byte{0x02}, 32)...)
	sig = append(sig, common.LeftPadBytes([]byte{0x40}, 32)...)
	sig = append(sig, common.LeftPadBytes([]byte{0xa0}, 32)...)
	sig = append(sig, common.LeftPadBytes([]byte{2}, 32)...)
	sig = append(sig, common.LeftPadBytes([]byte{1}, 32)...)
	sig = append(sig, common.LeftPadBytes([]byte{2}, 32)...)
	sig = append(sig, common.LeftPadBytes([]byte{2}, 32)...)
	sig = append(sig, common.LeftPadBytes([]byte{1}, 32)...)
	sig = append(sig, common.LeftPadBytes([]byte{2}, 32)...)
	packed, err = abi.Pack("nestedSlice", [][]uint8{{1, 2}, {1, 2}})
	if err != nil {
		t.Fatal(err)
	}
	if !bytes.Equal(packed, sig) {
		t.Errorf("expected %x got %x", sig, packed)
	}
}

func TestPackNumber(t *testing.T) {
	tests := []struct {
		value  reflect.Value
		packed []byte
	}{
//协议限制
		{reflect.ValueOf(0), common.Hex2Bytes("0000000000000000000000000000000000000000000000000000000000000000")},
		{reflect.ValueOf(1), common.Hex2Bytes("0000000000000000000000000000000000000000000000000000000000000001")},
		{reflect.ValueOf(-1), common.Hex2Bytes("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff")},

//键入角大小写
		{reflect.ValueOf(uint8(math.MaxUint8)), common.Hex2Bytes("00000000000000000000000000000000000000000000000000000000000000ff")},
		{reflect.ValueOf(uint16(math.MaxUint16)), common.Hex2Bytes("000000000000000000000000000000000000000000000000000000000000ffff")},
		{reflect.ValueOf(uint32(math.MaxUint32)), common.Hex2Bytes("00000000000000000000000000000000000000000000000000000000ffffffff")},
		{reflect.ValueOf(uint64(math.MaxUint64)), common.Hex2Bytes("000000000000000000000000000000000000000000000000ffffffffffffffff")},

		{reflect.ValueOf(int8(math.MaxInt8)), common.Hex2Bytes("000000000000000000000000000000000000000000000000000000000000007f")},
		{reflect.ValueOf(int16(math.MaxInt16)), common.Hex2Bytes("0000000000000000000000000000000000000000000000000000000000007fff")},
		{reflect.ValueOf(int32(math.MaxInt32)), common.Hex2Bytes("000000000000000000000000000000000000000000000000000000007fffffff")},
		{reflect.ValueOf(int64(math.MaxInt64)), common.Hex2Bytes("0000000000000000000000000000000000000000000000007fffffffffffffff")},

		{reflect.ValueOf(int8(math.MinInt8)), common.Hex2Bytes("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80")},
		{reflect.ValueOf(int16(math.MinInt16)), common.Hex2Bytes("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000")},
		{reflect.ValueOf(int32(math.MinInt32)), common.Hex2Bytes("ffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000000")},
		{reflect.ValueOf(int64(math.MinInt64)), common.Hex2Bytes("ffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000")},
	}
	for i, tt := range tests {
		packed := packNum(tt.value)
		if !bytes.Equal(packed, tt.packed) {
			t.Errorf("test %d: pack mismatch: have %x, want %x", i, packed, tt.packed)
		}
	}
}
